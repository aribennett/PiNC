# Autogenerated Packet definitions. See generate_header.py
from collections import namedtuple
from struct import unpack, pack


class SerialCommand():
    REPORT_STATUS = 1
    GET_STATUS = 2
    RUN = 3
    RESET = 4


class MotorCommand():
    NONE = 1
    SET_OMEGA = 2
    SET_ALPHA = 3
    SET_THETA = 4
    SET_JERK = 5
    ENABLE = 6
    DISABLE = 7


HeaderPacket = namedtuple('HeaderPacket', 'boardid command motorCount componentCount ')
MotorStatePacket = namedtuple('MotorStatePacket', 'motorId theta omega alpha ')
MotorCommandPacket = namedtuple('MotorCommandPacket', 'motorId motorCommand control ')
ComponentOutputPacket = namedtuple('ComponentOutputPacket', 'outputId output ')
ComponentDataPacket = namedtuple('ComponentDataPacket', 'dataID dataValue ')
size_HeaderPacket = 4
size_MotorStatePacket = 7
size_MotorCommandPacket = 6
size_ComponentOutputPacket = 3
size_ComponentDataPacket = 3


def unpack_HeaderPacket(bytes):
    return HeaderPacket._make(unpack('=BBBB', bytes))


def pack_HeaderPacket(boardid=0, command=0, motorCount=0, componentCount=0):
    return pack('=BBBB', boardid, command, motorCount, componentCount)


def unpack_MotorStatePacket(bytes):
    return MotorStatePacket._make(unpack('=Bhhh', bytes))


def pack_MotorStatePacket(motorId=0, theta=0, omega=0, alpha=0):
    return pack('=Bhhh', motorId, theta, omega, alpha)


def unpack_MotorCommandPacket(bytes):
    return MotorCommandPacket._make(unpack('=BBf', bytes))


def pack_MotorCommandPacket(motorId=0, motorCommand=0, control=0):
    return pack('=BBf', motorId, motorCommand, control)


def unpack_ComponentOutputPacket(bytes):
    return ComponentOutputPacket._make(unpack('=BH', bytes))


def pack_ComponentOutputPacket(outputId=0, output=0):
    return pack('=BH', outputId, output)


def unpack_ComponentDataPacket(bytes):
    return ComponentDataPacket._make(unpack('=Bh', bytes))


def pack_ComponentDataPacket(dataID=0, dataValue=0):
    return pack('=Bh', dataID, dataValue)
